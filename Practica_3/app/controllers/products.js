"use strict";

const utils = require('./utils');

class ProductException{
	constructor(errorMessage){
		this.errorMessage = errorMessage;
	}
}

class Product{
	constructor(title, description, imageUrl, unit, stock, pricePerUnit, category) {
        this._uuid = utils.generateUUID();
        this.title = title
        this.description = description
        this.imageUrl = imageUrl
        this.unit = unit
        this.stock = stock
        this.pricePerUnit = pricePerUnit
        this.category = category
    }
    //uuid
    get uuid() {
        return this._uuid;
    }
    set uuid(val) {
    	throw new ProductException('UUID have to be autogenerated.');
    }
    //title
    get title() {
        return this._title;
    }
    set title(val) {
    	if(typeof val !== "string" || val == ''){
    		throw new ProductException('Product title cannot be empty.');
    	}
        this._title = val;
    }
    //description
    get description() {
        return this._description;
    }
    set description(val) {
    	if(typeof val !== "string" || val == ''){
    		throw new ProductException('Description cannot be empty.');
    	}
        this._description = val;
    }
    //imageUrl
    get imageUrl() {
        return this._imageUrl;
    }
    set imageUrl(val) {
    	if(typeof val !== "string" || val == ''){
    		throw new ProductException('Image URL cannot be empty.');
    	}
        this._imageUrl = val;
    }
    //unit
    get unit() {
        return this._unit;
    }
    set unit(val) {
    	if(typeof val !== "string" || val == ''){
    		throw new ProductException('Unit cannot be empty.');
    	}
        this._unit = val;
    }
    //stock
    get stock() {
        return this._stock;
    }
    set stock(val) {
    	if(typeof val !== "number" || val < 0){
    		throw new ProductException('Stock cannot be negative or not number.');
    	}
        this._stock = val;
    }
    //pricePerUnit
    get pricePerUnit() {
        return this._pricePerUnit;
    }
    set pricePerUnit(val) {
    	if(typeof val !== "number" || val < 0){
    		throw new ProductException('Price Per Unit cannot be negative or not number.');
    	}
        this._pricePerUnit = val;
    }
    //category
    get category() {
        return this._category;
    }
    set category(val) {
    	if(typeof val !== "string" || val == ''){
    		throw new ProductException('Category cannot be empty.');
    	}
        this._category = val;
    }

    //Convertimos el String de JSON recibido 
    //en una nueva instancia de producto
    static createFromJson(jsonValue){
    	let obj = JSON.parse(jsonValue);
    	return Product.createFromObject(obj);
    }

    //Convertimos el objeto recibido en una
    //nueva instancia de producto

    //le entra algo como let a = {'stock': 15};
    static createFromObject(obj){
    	let newProduct = {};
    	Object.assign(newProduct, obj); //clone object and handle
        if(newProduct instanceof Product){
            return newProduct;
        } else {
            Product.cleanObject(newProduct);
            //Falta ir pasando los valores a un producto que pertenezca a la clase
            let product = new Product(newProduct['title'],newProduct['description'],
                newProduct['imageUrl'],newProduct['unit'],
                newProduct['stock'],newProduct['pricePerUnit'],
                newProduct['category']);
            return product;
        }
    }

    //Limpiamos el objeto recibido de todos
    //aquellos valores ajenos a la clase Product
    static cleanObject(obj){
    	const productProperties = ['title', 'description', 'imageUrl', 'unit', 'stock', 'pricePerUnit', 'category'];
    	for (let prop in obj){
    		//if prop not in productPrperties
            let prop_clean = prop.replace(/_/g, "");
            Object.defineProperty(obj, prop_clean,
                Object.getOwnPropertyDescriptor(obj, prop));
    		if(productProperties.indexOf(prop) == -1){
            	delete obj[prop];
            }
    	}
    }


}

module.exports = Product;